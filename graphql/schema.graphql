type Note {
  id: ID!
  name: String!
  completed: Boolean!
  user: User
}

type User {
  id: ID!
  name: String!
  randomText: String
}

input NoteInput {
  id: ID!
  name: String!
  completed: Boolean!
  userId: String!
}

input UpdateNoteInput {
  id: ID!
  name: String
  completed: Boolean
}

type Query {
  getNoteById(noteId: String!): Note
  listNotes: [Note]
  listUsers: [User]
}

type Mutation {
  createNote(note: NoteInput!): Note
  updateNote(note: UpdateNoteInput!): Note
  deleteNote(noteId: String!): String
}

type Subscription {
  onCreateNote: Note
    @aws_subscribe(mutations: ["createNote"])
  onDeleteNote: String
    @aws_subscribe(mutations: ["deleteNote"])
  onUpdateNote: Note
    @aws_subscribe(mutations: ["updateNote"])
}